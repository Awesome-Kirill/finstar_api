// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Kirill\Desktop\Finstar\internal\transport\handler.go

// Package mock_transport is a generated GoMock package.
package mock_transport

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Deposited mocks base method.
func (m *MockRepository) Deposited(ctx context.Context, userId int, total float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposited", ctx, userId, total)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposited indicates an expected call of Deposited.
func (mr *MockRepositoryMockRecorder) Deposited(ctx, userId, total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposited", reflect.TypeOf((*MockRepository)(nil).Deposited), ctx, userId, total)
}

// FindUser mocks base method.
func (m *MockRepository) FindUser(ctx context.Context, userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockRepositoryMockRecorder) FindUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockRepository)(nil).FindUser), ctx, userId)
}

// Transfer mocks base method.
func (m *MockRepository) Transfer(ctx context.Context, userIdFrom, userIdTo int, total float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, userIdFrom, userIdTo, total)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockRepositoryMockRecorder) Transfer(ctx, userIdFrom, userIdTo, total interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockRepository)(nil).Transfer), ctx, userIdFrom, userIdTo, total)
}
